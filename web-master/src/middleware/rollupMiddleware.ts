import {Request, Response} from 'express';
import {MongoInteractor} from '../services/mongoInteractor';

import got from 'got';
import {TezosInteractor} from '../services/tezosInteractor';
import {Rollup} from '../typings/rollup';
import {convertProof} from '../utils/proofConverter';

export class RollupMiddleware {
  constructor(
    private readonly mongoInteractor: MongoInteractor,
    private readonly tezosInteractor: TezosInteractor
  ) {
    this.executeRollup = this.executeRollup.bind(this);
  }

  async executeRollup(request: Request, response: Response): Promise<void> {
    const privateSignerKey = request.body.privateSignerKey;
    const transactions = await this.mongoInteractor.getTransactions();
    const {publicKeys, balances, nonces} =
      await this.tezosInteractor.getBigMapValues();
    const addressesTreeRoot = await this.tezosInteractor.getMKRoot(
      'mr_pub_key'
    );
    const balanceNonceTreeRoot = await this.tezosInteractor.getMKRoot(
      'mr_balance_nonce'
    );
    const rollup = new Rollup(
      addressesTreeRoot,
      balanceNonceTreeRoot,
      transactions,
      publicKeys,
      balances,
      nonces
    );
    const zokratesInputs = rollup.toZokratesInput();
    const proof = await got.post(
      process.env.WEB_ROLLUP_SERVER_URL + '/execute',
      {
        body: JSON.stringify(zokratesInputs),
        headers: {'Content-Type': 'text/plain'},
        throwHttpErrors: false,
      }
    );
    if(proof.statusCode !== 200) {
      response.status(proof.statusCode).send(proof.body);
    }

    const proofConverted = convertProof(proof.body);

    // const proofConverted =
    //   '{"scheme":"gm17","curve":"bls12_381","proof":{"a":"0x040560be50537e97093ee9aef8d58fd23182b6d096ba368bea411fb5d67711c4a6142d3fc2202eaf9fa06129488a6fe108ce155c6e2c120b61a9420cd427805dd5b34d77c039113e9528d009a90206c76e3d7b5ae11996b1f71d26e2354d0455","b":"0x03ccda17fd958a46e0b427718e299ded89a0f9d78f738ff9a45576f6327bd74b038b300158ca388f75db9d7edceebd0e057304fe7e5745ffb7660bc492164a839aacd446a326fc3ded03a4b5d1cee5b5634c3b9e3bf277102cd8c4c4d537ece61534df186f27a738ad611666285aee6628583fa7b4de8ec63a36526d42b92f7f646c64fa466b7542ccf141e8e5fffacd0b8da8cf7410432507fa2ece453c444a1b0b2188c9129348bff084c5b6e550f1d10a2db58b69667ac9f33eb4dffc24b2","c":"0x0c9812d2b580a2c2c423a856811cddf0359acc0a0ad2e7159079783f493840413a77e286687f3a90c2fea2548ec2ace419b22dd5058f6848ec70e17e026dccb09e8e8b831cc717f374637b2f7c95759fc05eaa95dc5a4ebbb23ade9cdef6d6b6"},"inputs":["c145ef0800000000000000000000000000000000000000000000000000000000","2acc5ff700000000000000000000000000000000000000000000000000000000","1278102d00000000000000000000000000000000000000000000000000000000","7a0239bb00000000000000000000000000000000000000000000000000000000","004a2d3f00000000000000000000000000000000000000000000000000000000","050d53ff00000000000000000000000000000000000000000000000000000000","0473569500000000000000000000000000000000000000000000000000000000","4d05a21800000000000000000000000000000000000000000000000000000000","0dabdf9300000000000000000000000000000000000000000000000000000000","cd52d5bf00000000000000000000000000000000000000000000000000000000","c23fd67e00000000000000000000000000000000000000000000000000000000","9e0a6fb600000000000000000000000000000000000000000000000000000000","cad935a500000000000000000000000000000000000000000000000000000000","5e3adadd00000000000000000000000000000000000000000000000000000000","c7f3a80f00000000000000000000000000000000000000000000000000000000","5b9ae47900000000000000000000000000000000000000000000000000000000","0000000000000000000000000000000000000000000000000000000000000000","0100000000000000000000000000000000000000000000000000000000000000","9400000000000000000000000000000000000000000000000000000000000000","0200000000000000000000000000000000000000000000000000000000000000","0100000000000000000000000000000000000000000000000000000000000000","0300000000000000000000000000000000000000000000000000000000000000","9b00000000000000000000000000000000000000000000000000000000000000","0200000000000000000000000000000000000000000000000000000000000000","0000000000000000000000000000000000000000000000000000000000000000","0200000000000000000000000000000000000000000000000000000000000000","4500000000000000000000000000000000000000000000000000000000000000","0300000000000000000000000000000000000000000000000000000000000000","99eb9eb800000000000000000000000000000000000000000000000000000000","3d99dd9a00000000000000000000000000000000000000000000000000000000","2f1b92cc00000000000000000000000000000000000000000000000000000000","b68d496900000000000000000000000000000000000000000000000000000000","c155ddae00000000000000000000000000000000000000000000000000000000","b26fafb400000000000000000000000000000000000000000000000000000000","4ebceeb600000000000000000000000000000000000000000000000000000000","8df77ea600000000000000000000000000000000000000000000000000000000","e7c52d0000000000000000000000000000000000000000000000000000000000","394b4c0000000000000000000000000000000000000000000000000000000000","4500000000000000000000000000000000000000000000000000000000000000","9b00000000000000000000000000000000000000000000000000000000000000","0300000000000000000000000000000000000000000000000000000000000000","0200000000000000000000000000000000000000000000000000000000000000","0100000000000000000000000000000000000000000000000000000000000000","0100000000000000000000000000000000000000000000000000000000000000"]}';

    console.log('Proof converted:\n\n');
    console.log(proofConverted);
    console.log('\n\n');

    const result = await this.tezosInteractor.callRollUpSmartContract(
      proofConverted,
      privateSignerKey
    );
    response.status(200).send(result);
  }
}
