from "./../../lib/merkleTree" import generateMerkleTreePoseidon;
from "./transactions_no_check" import calculateNewBalancesAndNonces, checkTransactions;
from "./../../lib/hash" import hashCouplesArrays;
from "./../../lib/types" import Transaction, TransactionHelper;


const u32 TREE_DEPTH = 10;
const u32 TRANSAC_NUM = 3;
const u32 ACCOUNT_NUM = 1024;

def main(field accountRoot, private u32[ACCOUNT_NUM][8]castedAccounts, field balancesNoncesRoot, private u32[ACCOUNT_NUM] balances, private u32[ACCOUNT_NUM] nonces, Transaction[TRANSAC_NUM] transactions, private TransactionHelper[TRANSAC_NUM] transactionExtras) -> (field, u32[ACCOUNT_NUM], u32[ACCOUNT_NUM]) {
    
    // verify that the accounts are the right ones
    field generatedAccountRoot = generateMerkleTreePoseidon(castedAccounts, TREE_DEPTH);
    log("account root generated {}", generatedAccountRoot);
    assert(accountRoot == generatedAccountRoot);

    // verify that the balances + nonces inputed are the right ones
    field[ACCOUNT_NUM] balancesNonces = hashCouplesArrays(balances, nonces);
    field generatedBalancesNoncesRoot = generateMerkleTreePoseidon(balancesNonces, TREE_DEPTH);
    log("balance + nonces root generated {}", generatedBalancesNoncesRoot);
    assert(balancesNoncesRoot == generatedBalancesNoncesRoot);

    // iterate through each transaction and check that the corresponding signature and public key are correct
    bool correctTransactions = checkTransactions(transactionExtras, castedAccounts, transactions);
    log("transactions verified: {}", correctTransactions);
    assert(correctTransactions);

    // iterate through each transaction and update the balances and nonces of each account
    u32[2][ACCOUNT_NUM] newBalancesAndNonces = calculateNewBalancesAndNonces(balances, nonces, transactions, transactionExtras);

    field[ACCOUNT_NUM] newBalancesNonces = hashCouplesArrays(newBalancesAndNonces[0], newBalancesAndNonces[1]);
    field newBalancesNoncesRoot = generateMerkleTreePoseidon(newBalancesNonces, TREE_DEPTH);
    log("new balance + nonces root generated {}", newBalancesNoncesRoot);
    
    return (newBalancesNoncesRoot, newBalancesAndNonces[0], newBalancesAndNonces[1]);
}

