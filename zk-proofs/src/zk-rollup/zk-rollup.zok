from "./../lib/merkleTree" import merkleTreeProof, generateMerkleTree;
from "./../lib/transactions" import checkTransactions, checkNoncesTransactions ,calculateNewBalances, calculateNewNonces, Transaction, TransactionHelper;
from "./../lib/concatenator" import concatenateTwoArraysIn256;

const u32 TREE_DEPTH = 2;
const u32 TRANSAC_NUM = 3;
const u32 ACCOUNT_NUM = 4;

def main(u32[8] accountRoot, private u32[ACCOUNT_NUM][8]hashedAccounts, u32[8] balanceNonceRoot, private u32[ACCOUNT_NUM] balances, private u32[ACCOUNT_NUM] nonces, Transaction[TRANSAC_NUM] transactions, private TransactionHelper[TRANSAC_NUM] transactionExtras) -> (u32[8], u32[ACCOUNT_NUM], u32[ACCOUNT_NUM]) {
    
    // verify that the accounts are the right ones
    u32[8] generatedAccountRoot = generateMerkleTree(hashedAccounts, TREE_DEPTH);
    log("account root generated {}", generatedAccountRoot);
    assert(accountRoot == generatedAccountRoot);

    // verify that the balances + nonces inputed are the right ones
    u32[ACCOUNT_NUM][8] balancesNonces = concatenateTwoArraysIn256(balances, nonces);
    u32[8] generatedBalanceNonceRoot = generateMerkleTree(balancesNonces, TREE_DEPTH);
    log("balance + nonces root generated {}", generatedBalanceNonceRoot);
    assert(balanceNonceRoot == generatedBalanceNonceRoot);

    // iterate through each transaction and check that the corresponding signature and public key are correct
    bool correctTransactions = checkTransactions(transactionExtras, hashedAccounts);
    log("accounts verified: {}", correctTransactions);
    assert(correctTransactions);

    // iterate through each transaction and check that the nonces
    bool correctNoncesTransactions = checkNoncesTransactions(nonces, transactions, transactionExtras);
    log("nonces verified: {}", correctNoncesTransactions);
    assert(correctNoncesTransactions);

    // iterate through each transaction and update the balances of each account
    u32[ACCOUNT_NUM] newBalances = calculateNewBalances(balances, transactions, transactionExtras);

    // iterate through each transaction and update the nonces of each account
    u32[ACCOUNT_NUM] newNonces = calculateNewNonces(nonces, transactions, transactionExtras);

    u32[ACCOUNT_NUM][8] balancesNonces = concatenateTwoArraysIn256(newBalances, newNonces);
    u32[8] balancesNoncesRoot = generateMerkleTree(balancesNonces, TREE_DEPTH);
    log("new balance + nonces root generated {}", balancesNoncesRoot);
    
    return (balancesNoncesRoot, newBalances, newNonces);
}

