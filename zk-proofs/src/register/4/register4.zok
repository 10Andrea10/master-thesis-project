from "./../../lib/merkleTree" import merkleTreeProof, generateMerkleTree;
from "./../../lib/concatenator" import concatenateTwoArraysIn256;

const u32 TREE_DEPTH = 2;
const u32 ACCOUNT_NUM = 4;

const u32[8] EMPTY_ACCOUNT = [
    1974621841,
    3881655503,
    2173465381,
    598290571,
    2129109780,
    559195614,
    2703600737,
    1217317262
];

def main(u32[8] accountRoot, private u32[ACCOUNT_NUM][8] hashedAccounts, u32[8] balanceNonceRoot, private u32[ACCOUNT_NUM] balances, private u32[ACCOUNT_NUM] nonces, u32 position, u32[8] newAccount, private u64[8]signature) -> (u32[8], u32[8]) {

    // verify that the accounts are the right ones
    u32[8] generatedOldAccountRoot = generateMerkleTree(hashedAccounts, TREE_DEPTH);
    assert(accountRoot == generatedOldAccountRoot);
    log("account root generated {}", generatedOldAccountRoot);

    // verify that the balances + nonces inputed are the right ones
    u32[ACCOUNT_NUM][8] balancesNonces = concatenateTwoArraysIn256(balances, nonces);
    u32[8] generatedBalanceNonceRoot = generateMerkleTree(balancesNonces, TREE_DEPTH);
    log("balance + nonces root generated {}", generatedBalanceNonceRoot);
    assert(balanceNonceRoot == generatedBalanceNonceRoot);

    // TODO: signature check: check that the position has been signed with the private key of the pubkey
    // of the new account to be added

    // check that the position is not already taken
    for u32 i in 0..8 {
        assert(hashedAccounts[position][i] == EMPTY_ACCOUNT[i]);
    }

    // update the account keys
    u32[ACCOUNT_NUM][8] mut newHashedAccounts = hashedAccounts;
    newHashedAccounts[position] = newAccount;
    
    // update balances and nonces
    u32[ACCOUNT_NUM] mut newBalances = balances;
    newBalances[position] = 0;
    u32[ACCOUNT_NUM] mut newNonces = nonces;
    newNonces[position] = 1;

    u32[ACCOUNT_NUM][8] newBalancesNonces = concatenateTwoArraysIn256(newBalances, newNonces);
    u32[8] newBalancesNoncesRoot = generateMerkleTree(newBalancesNonces, TREE_DEPTH);
    log("new balance + nonces root generated {}", newBalancesNoncesRoot);

    u32[8] newAccountRoot = generateMerkleTree(newHashedAccounts, TREE_DEPTH);
    log("new account root {}", newAccountRoot);

    return (newAccountRoot, newBalancesNoncesRoot);
}