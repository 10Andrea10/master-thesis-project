// example taken from zokrates documentation https://github.com/Zokrates/ZoKrates/blob/deploy/zokrates_cli/examples/merkleTree/sha256PathProof3.zok
import "hashes/sha256/512bitPadded" as hash;
import "hashes/utils/256bitsDirectionHelper" as multiplex;
import "utils/casts/field_to_u32";

// leave the root out of the struct as all the variables 
// in the struct are all private and the root is public
struct MerkleTreeProofStruct<DEPTH> {
	u32[8] leaf;
	bool[DEPTH] directionSelector; 
	u32[DEPTH][8] path;
}

def select(bool condition, u32[8] left, u32[8] right) -> (u32[8], u32[8]) {
	return (condition ? right : left, condition ? left : right);
}

// Merkle-Tree inclusion proof for tree depth 4 using sha256
// directionSelector => true if current digest is on the rhs of the hash

def merkleTreeProof<DEPTH>(u32[8] root, MerkleTreeProofStruct<DEPTH> proof) -> bool {
    // Start from the leaf
    u32[8] mut digest = proof.leaf;

	// Loop up the tree
	for u32 i in 0..DEPTH {
		(u32[8], u32[8]) s = select(proof.directionSelector[i], digest, proof.path[i]);
		digest = hash(s.0, s.1);
	}

    return digest == root;
}

def generateMerkleTree<LEAFS_NUM>(u32[LEAFS_NUM][8] leafs, u32 tree_depth) -> u32[8] {

	// assert that LEAFS_NUM is a power of 2
	assert(field_to_u32(2 ** tree_depth) == LEAFS_NUM);

	u32[LEAFS_NUM][8] mut merkleTree = leafs;

	for u32 i in 0..tree_depth {
		// old line not working with zokrates 0.8.7
		// u32 step_size = field_to_u32(2 ** (i + 1));
		u32 step_size = 1 << (i + 1);
		u32 step_number = (LEAFS_NUM / step_size);
		for u32 j in  0..step_number {
			u32 leftIndex = j * step_size;
			u32 rightIndex = leftIndex + step_size / 2;
			merkleTree[leftIndex] = hash(merkleTree[leftIndex], merkleTree[rightIndex]);  
		}
	}

    return merkleTree[0];
}
